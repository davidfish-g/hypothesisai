'use client';

import { useState, useEffect } from 'react';
import { useSession } from 'next-auth/react';
import { Button } from '@/components/ui/button';
import { useRouter } from 'next/navigation';

export default function Evaluate() {
  const { data: session, status } = useSession();
  const router = useRouter();
  const [hypothesis, setHypothesis] = useState<any>(null);
  const [ratings, setRatings] = useState({
    plausibility: 0,
    novelty: 0,
    testability: 0,
  });
  const [comments, setComments] = useState('');
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [isLoading, setIsLoading] = useState(true);

  useEffect(() => {
    if (status === 'unauthenticated') {
      router.push('/auth/signin');
    }
  }, [status, router]);

  useEffect(() => {
    const createTestHypothesis = async () => {
      try {
        const response = await fetch('/api/hypotheses', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            content: "The quantum entanglement of neural networks could be used to create a new form of artificial intelligence that operates at the quantum level.",
            modelName: "GPT-4",
            domain: "Quantum Computing"
          }),
        });

        if (!response.ok) {
          throw new Error('Failed to create test hypothesis');
        }

        const data = await response.json();
        setHypothesis(data);
      } catch (error) {
        console.error('Failed to create test hypothesis:', error);
      }
    };

    const fetchHypothesis = async () => {
      try {
        const response = await fetch('/api/hypotheses');
        const data = await response.json();
        if (data.length > 0) {
          setHypothesis(data[0]); // Use the first hypothesis for now
        } else {
          // If no hypotheses exist, create a test one
          await createTestHypothesis();
        }
      } catch (error) {
        console.error('Failed to fetch hypothesis:', error);
      } finally {
        setIsLoading(false);
      }
    };

    if (status === 'authenticated') {
      fetchHypothesis();
    }
  }, [status]);

  const handleRatingChange = (criterion: keyof typeof ratings, value: number) => {
    setRatings((prev) => ({ ...prev, [criterion]: value }));
  };

  const handleSubmit = async () => {
    if (!session?.user || !hypothesis) return;

    setIsSubmitting(true);
    try {
      const response = await fetch('/api/evaluations', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          hypothesisId: hypothesis.id,
          ...ratings,
          comments,
        }),
      });

      if (!response.ok) {
        throw new Error('Failed to submit evaluation');
      }

      // Reset form and show success message
      setRatings({ plausibility: 0, novelty: 0, testability: 0 });
      setComments('');
      router.refresh();
      // TODO: Show success toast
    } catch (error) {
      console.error('Error submitting evaluation:', error);
      // TODO: Show error toast
    } finally {
      setIsSubmitting(false);
    }
  };

  if (status === 'loading' || isLoading) {
    return (
      <div className="flex items-center justify-center min-h-screen">
        <div className="text-center">
          <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto"></div>
          <p className="mt-4 text-gray-600">Loading...</p>
        </div>
      </div>
    );
  }

  if (!session?.user || !hypothesis) {
    return null;
  }

  return (
    <div className="max-w-3xl mx-auto space-y-8">
      <div className="flex justify-between items-center">
        <h1 className="text-3xl font-bold text-gray-900">Evaluate Hypothesis</h1>
        <div className="text-sm text-gray-600">
          Domain: <span className="font-medium">{hypothesis.domain}</span>
        </div>
      </div>

      {/* Hypothesis Card */}
      <div className="bg-white p-6 rounded-lg shadow-sm border">
        <div className="space-y-4">
          <div>
            <h2 className="text-lg font-semibold text-gray-900">Hypothesis</h2>
            <p className="mt-2 text-gray-700">{hypothesis.content}</p>
          </div>
          <div className="text-sm text-gray-600">
            Generated by: <span className="font-medium">{hypothesis.modelName}</span>
          </div>
        </div>
      </div>

      {/* Rating Form */}
      <div className="bg-white p-6 rounded-lg shadow-sm border">
        <h2 className="text-lg font-semibold text-gray-900 mb-6">Your Evaluation</h2>
        
        <div className="space-y-6">
          {/* Plausibility Rating */}
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-2">
              Plausibility (1-5)
            </label>
            <div className="flex space-x-2">
              {[1, 2, 3, 4, 5].map((value) => (
                <button
                  key={value}
                  onClick={() => handleRatingChange('plausibility', value)}
                  className={`w-10 h-10 rounded-full border ${
                    ratings.plausibility === value
                      ? 'bg-blue-600 text-white border-blue-600'
                      : 'border-gray-300 text-gray-700 hover:border-blue-600'
                  }`}
                >
                  {value}
                </button>
              ))}
            </div>
          </div>

          {/* Novelty Rating */}
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-2">
              Novelty (1-5)
            </label>
            <div className="flex space-x-2">
              {[1, 2, 3, 4, 5].map((value) => (
                <button
                  key={value}
                  onClick={() => handleRatingChange('novelty', value)}
                  className={`w-10 h-10 rounded-full border ${
                    ratings.novelty === value
                      ? 'bg-blue-600 text-white border-blue-600'
                      : 'border-gray-300 text-gray-700 hover:border-blue-600'
                  }`}
                >
                  {value}
                </button>
              ))}
            </div>
          </div>

          {/* Testability Rating */}
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-2">
              Testability (1-5)
            </label>
            <div className="flex space-x-2">
              {[1, 2, 3, 4, 5].map((value) => (
                <button
                  key={value}
                  onClick={() => handleRatingChange('testability', value)}
                  className={`w-10 h-10 rounded-full border ${
                    ratings.testability === value
                      ? 'bg-blue-600 text-white border-blue-600'
                      : 'border-gray-300 text-gray-700 hover:border-blue-600'
                  }`}
                >
                  {value}
                </button>
              ))}
            </div>
          </div>

          {/* Comments */}
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-2">
              Comments
            </label>
            <textarea
              value={comments}
              onChange={(e) => setComments(e.target.value)}
              rows={4}
              className="w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
              placeholder="Share your thoughts about this hypothesis..."
            />
          </div>

          {/* Submit Button */}
          <div className="flex justify-end">
            <Button
              onClick={handleSubmit}
              disabled={!ratings.plausibility || !ratings.novelty || !ratings.testability || isSubmitting}
            >
              {isSubmitting ? 'Submitting...' : 'Submit Evaluation'}
            </Button>
          </div>
        </div>
      </div>
    </div>
  );
} 